/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/minio/minio-operator/pkg/apis/miniocontroller/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MirrorLister helps list Mirrors.
type MirrorLister interface {
	// List lists all Mirrors in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.Mirror, err error)
	// Mirrors returns an object that can list and get Mirrors.
	Mirrors(namespace string) MirrorNamespaceLister
	MirrorListerExpansion
}

// mirrorLister implements the MirrorLister interface.
type mirrorLister struct {
	indexer cache.Indexer
}

// NewMirrorLister returns a new MirrorLister.
func NewMirrorLister(indexer cache.Indexer) MirrorLister {
	return &mirrorLister{indexer: indexer}
}

// List lists all Mirrors in the indexer.
func (s *mirrorLister) List(selector labels.Selector) (ret []*v1beta1.Mirror, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Mirror))
	})
	return ret, err
}

// Mirrors returns an object that can list and get Mirrors.
func (s *mirrorLister) Mirrors(namespace string) MirrorNamespaceLister {
	return mirrorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MirrorNamespaceLister helps list and get Mirrors.
type MirrorNamespaceLister interface {
	// List lists all Mirrors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.Mirror, err error)
	// Get retrieves the Mirror from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.Mirror, error)
	MirrorNamespaceListerExpansion
}

// mirrorNamespaceLister implements the MirrorNamespaceLister
// interface.
type mirrorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Mirrors in the indexer for a given namespace.
func (s mirrorNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Mirror, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Mirror))
	})
	return ret, err
}

// Get retrieves the Mirror from the indexer for a given namespace and name.
func (s mirrorNamespaceLister) Get(name string) (*v1beta1.Mirror, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("mirror"), name)
	}
	return obj.(*v1beta1.Mirror), nil
}
