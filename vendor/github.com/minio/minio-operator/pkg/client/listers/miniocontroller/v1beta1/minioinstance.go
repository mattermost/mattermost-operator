/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/minio/minio-operator/pkg/apis/miniocontroller/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MinIOInstanceLister helps list MinIOInstances.
type MinIOInstanceLister interface {
	// List lists all MinIOInstances in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error)
	// MinIOInstances returns an object that can list and get MinIOInstances.
	MinIOInstances(namespace string) MinIOInstanceNamespaceLister
	MinIOInstanceListerExpansion
}

// minioInstanceLister implements the MinIOInstanceLister interface.
type minioInstanceLister struct {
	indexer cache.Indexer
}

// NewMinIOInstanceLister returns a new MinIOInstanceLister.
func NewMinIOInstanceLister(indexer cache.Indexer) MinIOInstanceLister {
	return &minioInstanceLister{indexer: indexer}
}

// List lists all MinIOInstances in the indexer.
func (s *minioInstanceLister) List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MinIOInstance))
	})
	return ret, err
}

// MinIOInstances returns an object that can list and get MinIOInstances.
func (s *minioInstanceLister) MinIOInstances(namespace string) MinIOInstanceNamespaceLister {
	return minioInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MinIOInstanceNamespaceLister helps list and get MinIOInstances.
type MinIOInstanceNamespaceLister interface {
	// List lists all MinIOInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error)
	// Get retrieves the MinIOInstance from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.MinIOInstance, error)
	MinIOInstanceNamespaceListerExpansion
}

// minioInstanceNamespaceLister implements the MinIOInstanceNamespaceLister
// interface.
type minioInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MinIOInstances in the indexer for a given namespace.
func (s minioInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MinIOInstance))
	})
	return ret, err
}

// Get retrieves the MinIOInstance from the indexer for a given namespace and name.
func (s minioInstanceNamespaceLister) Get(name string) (*v1beta1.MinIOInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("minioinstance"), name)
	}
	return obj.(*v1beta1.MinIOInstance), nil
}
